//----------  responsive breakpoints
//------------------------------------------------------------------------------
// @mixin breakpoint ($value) {
// 	@if $value == 'phone' {
// 		@media only screen and (min-width: 120px) and (max-width: 767px) { @content; }
// 	} @else if $value == 'tablet' {
// 		@media only screen and (min-width: 768px) and (max-width: 1024px) { @content; }
// 	} @else if $value == 'touch' {
// 		@media only screen and (min-width: 120px) and (max-width: 1024px) { @content; }
// 	} @else if $value == 'desktop' {
// 		@media only screen and (min-width: 1025px) { @content; }
// 	} @else {
// 		@media only screen and (max-width: $value) { @content; }
// 	}
// }

//----------  input placeholder
//------------------------------------------------------------------------------
@mixin placeholder {
	&::-webkit-input-placeholder {
		@content;
	}

	&:-moz-placeholder {
		@content;
	}

	&::-moz-placeholder {
		@content;
	}

	&:-ms-input-placeholder {
		@content;
	}
}

//----------  base float
//------------------------------------------------------------------------------
@mixin base-float {
	width: 100%;
	float: left;
}

//----------  Text Overflow
//------------------------------------------------------------------------------
@mixin text-truncate {
	overflow: hidden;
	text-overflow: ellipsis;
	white-space: nowrap;
}

//----------  Vertical / horizontal alignment
//------------------------------------------------------------------------------
@mixin align($position: relative, $direction: x) {
	position: $position;
	@if ($direction == 'y') {
		top: 50%;
		transform: translateY(-50%);
	} @else if ($direction == 'xy') {
		top: 50%;
		left: 50%;
		transform: translate(-50%, -50%);
	} @else {
		left: 50%;
		transform: translateX(-50%);
	}
}
// example: @include align(absolute, xy); for centering both axis'
// default @include align(); will be relative on x axis

//---------- svg sprite
//------------------------------------------------------------------------------

// Set the `$sprite` map
// @group sprite
$sprite: map-get($icons, sprite) !default;

// Retrive an attributes value for a specific icon in the sprite map
// @param {string} $icon - The name of the icon
// @param {string} $attr - The attribute you wish to retrieve (e.g. width)
@function sprite-attr($icon, $attr) {
	$new-icon: map-get($icons, $icon);
	@if $new-icon == null {
		@warn 'Can not find an icon with the name #{$icon}';
	}
	@return map-get($new-icon, $attr);
}

// Create a map with the specified icon of attributes
// @param {string} $icon - The name of the icon
@function icon-attr($icon) {
	$attr: (
		width: sprite-attr($icon, width),
		height: sprite-attr($icon, height),
		x: sprite-attr($icon, backgroundX),
		y: sprite-attr($icon, backgroundY)
	);

	@return $attr;
}

// Get the width of an icon in em
// @param {string} $icon - The name of the icon
@function icon-width($icon) {
	@return sprite-attr($icon, width);
}

// Get the height of an icon in em
// @param {string} $icon - The name of the icon
@function icon-height($icon) {
	@return sprite-attr($icon, height);
}

// Assign the correct SVG background image and dimensions to the element
%sprite {
	background-image: url(map-get($sprite, svgPath));
	background-size: map-get($sprite, width) map-get($sprite, height);
}

@mixin sprite($icon, $type: all) {
	@if $type == all {
		// Shares the backgrounds
		@extend %sprite;
	}

	$icon-map: icon-attr($icon);

	// Outputs dimensions in em
	@if $type == all or $type == size {
		width: map-get($icon-map, width) + 1;
		height: map-get($icon-map, height) + 1;
	}

	// Outputs background position in em
	@if $type == all or $type == bg {
		background-position: map-get($icon-map, x) - 10 map-get($icon-map, y) - 10;
	}

}

/*
  This mixin can be used to set the object-fit:
  @include object-fit(contain);
  or object-fit and object-position:
  @include object-fit(cover, top);
*/

@mixin object-fit($fit: fill, $position: null) {
	-o-object-fit: $fit;
	object-fit: $fit;
	@if $position {
		font-family: 'object-fit: #{$fit}; object-position: #{$position}';
		-o-object-position: $position;
		object-position: $position;
	}
	@else {
		font-family: 'object-fit: #{$fit}';
	}
}

//	Visually hidden mixin for accessability
@mixin visually-hidden() {
	border: 0;
	clip: rect(0 0 0 0);
	height: 1px;
	margin: -1px;
	overflow: hidden;
	padding: 0;
	position: absolute;
	width: 1px;
}
// Hover mixin only for desktop devices
// to include use @include hover {your hover styles} can also include elements
@mixin hover {
	@media only screen and (min-width: 1025px) {
		.no-touch &:hover {
			@content;
		}
	}
}