@using LZRNS.DomainModels.Models
@inherits UmbracoViewPage<LZRNS.Models.ViewModel.PlayerDetailsViewModel>

<main class="main" data-template-name="@Page.Name">
	@{
		Html.RenderAction<SharedController>(c => c.Banner(null), Model.Banner);
	}
	@if (Model.CurrentPlayer != null)
	{
		<div class="player-info">
			<div class="wrap">
				<div class="row">
					<div class="col-lg-7">
						<div class="main-info">
							<div class="picture" style="background-image: url('@Model.CurrentPlayer.Image')"></div>
							<div class="name-and-team">
								<h4 class="name">@Model.CurrentPlayer.GetFullName</h4>
								@if (Model.CurrentPlayer.CurrentTeam != null)
								{
									<h4 class="team">@Model.CurrentPlayer.CurrentTeam.TeamName</h4>
								}
							</div>
							<ul class="vitals">
								<li>@UmbracoDictionary.Player.Height <span>@(Model.CurrentPlayer.Height)cm</span> </li>
								<li>@UmbracoDictionary.Player.Weight <span>@(Model.CurrentPlayer.Weight)kg</span></li>
								<li>@UmbracoDictionary.Player.Year <span>@(Model.CurrentPlayer.YearOfBirth).</span></li>
							</ul>
						</div>
					</div>
					<div class="col-lg-5">
						<div class="career-highs">
							<h3>@UmbracoDictionary.Player.CareerHighs</h3>
							<table>
								<tbody>
									@if (Model.CurrentPlayer.CareerHighPts != null)
									{
										@RenderCareerHighs(UmbracoDictionary.Stats.Pts, Model.CurrentPlayer.CareerHighPts, s => s.Pts)
									}
									@if (Model.CurrentPlayer.CareerHighReb != null)
									{
										@RenderCareerHighs(UmbracoDictionary.Stats.Reb, Model.CurrentPlayer.CareerHighReb, s => s.Reb)
									}
									@if (Model.CurrentPlayer.CareerHighAst != null)
									{
										@RenderCareerHighs(UmbracoDictionary.Stats.Ast, Model.CurrentPlayer.CareerHighAst, s => s.Ast)
									}
									@if (Model.CurrentPlayer.CareerHighStl != null)
									{
										@RenderCareerHighs(UmbracoDictionary.Stats.Stl, Model.CurrentPlayer.CareerHighStl, s => s.Stl)
									}
									@if (Model.CurrentPlayer.CareerHighBlk != null)
									{
										@RenderCareerHighs(UmbracoDictionary.Stats.Blk, Model.CurrentPlayer.CareerHighBlk, s => s.Blk)
									}
									@if (Model.CurrentPlayer.CareerHighEff != null)
									{
										@RenderCareerHighs(UmbracoDictionary.Stats.Eff, Model.CurrentPlayer.CareerHighEff, s => s.Eff)
									}
								</tbody>
							</table>
						</div>
					</div>
				</div>
				<div class="row js-tabs-container">
					<div class="stats col-12">
						<div class="tabs-container">
							<ul class="tabs">
								@foreach (var item in Model.CurrentPlayer.PlayersPerSeason)
								{
									var season = item.Team.LeagueSeason;
									<li @(Model.CurrentPlayer.PlayersPerSeason.IndexOf(item) == 0 ? "class=selected" : string.Empty) data-tab="@season.SeasonId">
										<span>@season.Season.Name</span>
									</li>
								}
							</ul>
							@foreach (var item in Model.CurrentPlayer.PlayersPerSeason)
							{
								var season = item.Team.LeagueSeason;
								<span class="tab-heading" data-tab="@season.Id">@season.FullName</span>
								<div class="tab-content @season.Id">
									<div class="table">
										<table>
											<thead>
												@RenderTableHeading(false)
											</thead>
											<tbody>
												@foreach (var stat in item.Player.Stats.OrderBy(s => s.Game.Round.Id))
												{
													var team = stat.Game.TeamAId == stat.Player.CurrentTeam.Id ? stat.Game.TeamB : stat.Game.TeamA;
													<tr>
														<td class="kolo">@stat.Game.Round.RoundName</td>
														<td class="name">@team.TeamName</td>
														<td>
															@stat.MinutesPlayed
														</td>
														<td>@stat.Eff</td>
														<td>
															<span>@stat.FgM/@stat.FgA</span>
															<span>@(stat.FgPerc)%</span>
														</td>
														<td>
															<span>@stat.TwoPtMade/@stat.TwoPtA</span>
															<span>@(stat.TwoPtPerc)%</span>
														</td>
														<td>
															<span>@stat.ThreePtMade/@stat.ThreePtA</span>
															<span>@(stat.ThreePtPerc)%</span>
														</td>
														<td>
															<span>@stat.FtMade/@stat.FtA</span>
															<span>@(stat.FtPerc)%</span>
														</td>
														<td>@stat.Reb</td>
														<td>@stat.OReb</td>
														<td>@stat.DReb</td>
														<td>@stat.Ast</td>
														<td>@stat.To</td>
														<td>@stat.Stl</td>
														<td>@stat.Blk</td>
														<td>@stat.Pts</td>
													</tr>
												}
											</tbody>
										</table>
									</div>
								</div>
							}
						</div>
					</div>
				</div>
				<div class="row js-tabs-container">
					<div class="stats col-12">
						<div class="tabs-container">
							<ul class="tabs">
								@RenderStatsTab(UmbracoDictionary.Stats.Filter.Categories.Totals, "tab7", true, Model.TotalStats)
								@RenderStatsTab(UmbracoDictionary.Stats.Filter.Categories.Averages, "tab8", true, Model.AverageStats)
								@RenderStatsTab(UmbracoDictionary.Stats.Filter.Categories.PerMinute, "tab9", true, Model.PerMinuteStats)
							</ul>
							@RenderStatsTable(UmbracoDictionary.Stats.Filter.Categories.Totals, "tab7", Model.TotalStats)
							@RenderStatsTable(UmbracoDictionary.Stats.Filter.Categories.Averages, "tab8", Model.AverageStats)
							@RenderStatsTable(UmbracoDictionary.Stats.Filter.Categories.PerMinute, "tab9", Model.PerMinuteStats)
						</div>
					</div>
				</div>
			</div>
		</div>
	}
</main>

@helper RenderCareerHighs(string category, Stats stats, Func<Stats, int> valueCriteriea)
{
	var playerTeam = Model.CurrentPlayer.CurrentTeam;
	if (playerTeam == null)
	{
		return;
	}
	var team = stats.Game.TeamAId == playerTeam.Id ? stats.Game.TeamB : stats.Game.TeamA;
	<tr>
		<td>@category:</td>
		<td class="amount">@valueCriteriea.Invoke(stats)</td>
		<td>vs</td>
		<td class="against">@team.TeamName</td>
		<td class="year">@stats.Game.Season.Name</td>
	</tr>
}

@helper RenderStatsTab(string tabName, string tabKey, bool isSelected, IReadOnlyList<PlayerStats> stats)
{
	if (stats == null || !stats.Any())
	{
		return;
	}
	<li @(isSelected ? "class=selected" : string.Empty) data-tab="@tabKey">
		<span>@tabName</span>
	</li>
}

@helper RenderStatsTable(string tableName, string tableKey, IReadOnlyList<PlayerStats> stats)
{
	if (stats == null || !stats.Any())
	{
		return;
	}
	<span class="tab-heading" data-tab="@tableKey">@tableName</span>
	<div class="tab-content @tableKey">
		<div class="table">
			<table>
				<thead>
					@RenderTableHeading(true)
				</thead>
				<tbody>
					@foreach (var item in stats)
					{
						<tr>
							<td>
								@item.MinutesPlayed
							</td>
							<td>@item.Efficiency</td>
							<td>
								@item.FieldGoals
							</td>
							<td>
								@item.TwoPoints
							</td>
							<td>
								@item.ThreePoints
							</td>
							<td>
								@item.FreeThrows
							</td>
							<td>@item.Rebounds</td>
							<td>@item.OffensiveRebounds</td>
							<td>@item.DefensiveRebounds</td>
							<td>@item.Assists</td>
							<td>@item.To</td>
							<td>@item.Steals</td>
							<td>@item.Blocks</td>
							<td>@item.Points</td>
						</tr>
					}
				</tbody>
			</table>
		</div>
	</div>
}

@helper RenderTableHeading(bool hideRoundAndRival)
{
	<tr>
		@if (!hideRoundAndRival)
		{
			<th class="kolo">@UmbracoDictionary.Shared.Round</th>
			<th class="name">@UmbracoDictionary.Shared.Rival</th>
		}
		<th>@UmbracoDictionary.Stats.Min</th>
		<th>@UmbracoDictionary.Stats.Eff</th>
		<th>@UmbracoDictionary.Stats.Fg</th>
		<th>@UmbracoDictionary.Stats.TwoPts</th>
		<th>@UmbracoDictionary.Stats.ThreePts</th>
		<th>@UmbracoDictionary.Stats.Ft</th>
		<th>@UmbracoDictionary.Stats.Reb</th>
		<th>@UmbracoDictionary.Stats.Off</th>
		<th>@UmbracoDictionary.Stats.Def</th>
		<th>@UmbracoDictionary.Stats.Ast</th>
		<th>@UmbracoDictionary.Stats.To</th>
		<th>@UmbracoDictionary.Stats.Stl</th>
		<th>@UmbracoDictionary.Stats.Blk</th>
		<th>@UmbracoDictionary.Stats.Pts</th>
	</tr>
}
